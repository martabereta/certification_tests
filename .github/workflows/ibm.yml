# This workflow will build a kuberneties cluster, deploy License Service instance
# and run certification tests to confirm basic functionality
#
# To configure this workflow:
#
# 1. Ensure that your repository contains a Dockerfile
# 2. Setup secrets in your repository by going to settings: Create ICR_NAMESPACE and IBM_CLOUD_API_KEY
# 3. Change the values for the following variables
#  IBM_CLOUD_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}
#  IBM_CLOUD_REGION: eu-de
#  IBM_CLOUD_RESOURCE_GROUP: Default
#  IKS_CLUSTER_NAME: mycluster-ls
#  IKS_CLUSTER_ZONE: dal10
#  IKS_CLUSTER_PRIVATE_VLAN: 2887074
#  IKS_CLUSTER_PUBLIC_VLAN: 2887072
#  IKS_CLUSTER_FLAVOR: b2c.4x16

name: Build and Deploy to IKS

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [created]

# Environment variables available to all jobs and steps in this workflow
env:
  #GITHUB_SHA: ${{ github.sha }}
  IBM_CLOUD_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}
  IBM_CLOUD_REGION: eu-de
  IBM_CLOUD_RESOURCE_GROUP: Default
  IKS_CLUSTER_NAME: mycluster-ls
  IKS_CLUSTER_ZONE: dal10
  IKS_CLUSTER_PRIVATE_VLAN: 2887074
  IKS_CLUSTER_PUBLIC_VLAN: 2887072
  IKS_CLUSTER_FLAVOR: b2c.4x16

  DEPLOYMENT_NAME: iks-release
  #PORT: 5001

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    # Download and Install IBM Cloud CLI
    - name: Install IBM Cloud CLI
      run: |
        curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
        ibmcloud --version
        ibmcloud config --check-version=false
        ibmcloud plugin install -f kubernetes-service
        ibmcloud plugin install -f container-registry

    # Authenticate with IBM Cloud CLI
    - name: Authenticate with IBM Cloud CLI
      run: |
        ibmcloud login --apikey "${IBM_CLOUD_API_KEY}" -r "${IBM_CLOUD_REGION}" -g "${IBM_CLOUD_RESOURCE_GROUP}"
        ibmcloud cr region-set "${IBM_CLOUD_REGION}"
        ibmcloud cr login

    - name: Check if k8s exists
      id: cluster_existence
      run: ibmcloud ks cluster ls | grep $IKS_CLUSTER_NAME | grep critical
      outputs:
        post_message: 'Exist'

      #echo "::set-env name=action_state::yellow"
      #  echo $IKS_CLUSTER_NAME

    - name: TEST
      if: ${{ steps.cluster_existence.outputs.post_message == 'Exist' }}
      run: echo 'Jeeeee!'
      # echo $action_state

    - name: Check if k8s exists
      if: ${{ ibmcloud ks cluster ls | grep $IKS_CLUSTER_NAME | grep normal == failure() }}
      run: echo 'trzeba stworzyc kluster'

#    - name: TEST2
#      run: echo steps.cluster_existence_again.outputs.post_message



      # TEMPORARY COMMENTED AS ONCE THE CLUSTER IS CREATED
#    - name: Create K8s
#      run: |
#        ibmcloud target -g $IBM_CLOUD_RESOURCE_GROUP
#        ibmcloud ks cluster create classic --zone $IKS_CLUSTER_ZONE --private-vlan $IKS_CLUSTER_PRIVATE_VLAN --public-vlan $IKS_CLUSTER_PUBLIC_VLAN --flavor $IKS_CLUSTER_FLAVOR --name $IKS_CLUSTER_NAME --hardware shared --workers 2

    - name: Check K8s
      run: ./scripts/check_cluster.sh $IKS_CLUSTER_NAME

#    - name: Verify K8s cluster
#      if: steps.cluster_creation.outputs.post_message == 'normal'
#      run: echo That is really great!

    - name: Cluster connection
      run: |
        ibmcloud login --apikey "uSR4X8ZcV_anySOrLAFF0jBYrrGOa5ujeRM7f0DnBePX"
        ibmcloud target -g Default

    - name: Download LS repository
      run: git clone https://github.com/IBM/ibm-licensing-operator.git

    - name: kubectl installation and configuration
      run: |
        curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl
        ibmcloud ks cluster config --cluster $IKS_CLUSTER_NAME
        kubectl config current-context

#    - name: kubectl verification TO REMOVE
#      run: |
#        kubectl version --client
#        kubectl version
#        kubectl cluster-info

    - name: Instal License Service
      run:  ./ibm-licensing-operator/common/scripts/ibm_licensing_operator_install.sh --olm_global_catalog_namespace ibm-common-services

    # Build the Docker image
#    - name: Build with Docker
#      run: |
#        docker build -t "$REGISTRY_HOSTNAME"/"$ICR_NAMESPACE"/"$IMAGE_NAME":"$GITHUB_SHA" \
#          --build-arg GITHUB_SHA="$GITHUB_SHA" \
#          --build-arg GITHUB_REF="$GITHUB_REF" .

    # Push the image to IBM Container Registry
#    - name: Push the image to ICR
#      run: |
#        docker push $REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA

    # Deploy the Docker image to the IKS cluster
#    - name: Deploy to IKS
#      run: |
#        ibmcloud ks cluster config --cluster $IKS_CLUSTER  --yaml --admin
#        kubectl config current-context
#        kubectl apply -f deploy.yaml
#        kubectl rollout status deployment/$DEPLOYMENT_NAME



    #   kubectl create service loadbalancer $DEPLOYMENT_NAME --tcp=80:$PORT --dry-run -o yaml > service.yaml
    #   kubectl apply -f service.yaml
    #   kubectl get services -o wide
    #   ibmcloud ks cluster rm  --cluster $IKS_CLUSTER

#        ibmcloud ks cluster config --cluster $IKS_CLUSTER
#        kubectl config current-context
#        kubectl create deployment $DEPLOYMENT_NAME --image=$REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA --dry-run -o yaml > deployment.yaml
#        kubectl apply -f deployment.yaml
#        kubectl rollout status deployment/$DEPLOYMENT_NAME
#        kubectl create service loadbalancer $DEPLOYMENT_NAME --tcp=80:$PORT --dry-run -o yaml > service.yaml
#        kubectl apply -f service.yaml
#        kubectl get services -o wide
